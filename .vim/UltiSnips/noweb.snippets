# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# .vim/Ultisnips/noweb.snippets - Snippets that are defined for Noweb files
#
# Copyright (C) 2014         Bijan Chokoufe Nejad         <bijan@chokoufe.com>
# Recent versions:  https://github.com/bijancn/bcn_scripts
#
# This source code is free software that comes with ABSOLUTELY NO WARRANTY; you
# can redistribute it and/or modify it under the terms of the GNU GPL Version 2:
# http://www.gnu.org/licenses/gpl-2.0-standalone.html
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

extends fortran
extends tex

# Chunks
snippet nc "Create new noweb chunk"
<<${1:chunkname}>>=
@ %def
@
endsnippet

snippet ec "Extract Chunk" b
<<$1>>
<<${1:chunkname}>>=
${0:${VISUAL}}
@$2
endsnippet

snippet ni "A template for a noweb/fortran interface"
<<${1:module}: public>>=
  public :: ${2:function}
<<$1: interfaces>>=
  interface $2
     module procedure $2_${3:type}
  end interface
endsnippet

snippet nm "A template for the typical structure of a noweb/fortran module"
<<[[${1:name}.f90]]>>=
<<File header>>

module $1

<<Use kinds>>
	${2:use dependencies}

<<Standard module head>>

<<${1/_/ /g}: public>>

<<${1/_/ /g}: parameters>>

<<${1/_/ /g}: types>>

<<${1/_/ /g}: interfaces>>

contains

<<${1/_/ /g}: procedures>>

end module $1
@ %def $1
@
endsnippet

snippet nt "A template for a noweb/fortran type"
<<${1:module}: public>>=
  public :: ${2:type}
<<$1: types>>=
  type :: $2
		${3: values}
	contains
<<$1: ${2/_/ /g}: TBP>>
  end type $2

@ %def $2
@
endsnippet

snippet np "A template for a noweb/fortran subroutine"
<<${1:module}: procedures>>=
	pure subroutine ${2:procedure} (${3:args})
		${4:implementation}
  end subroutine $2

@ %def $2
@
endsnippet

snippet nf "A template for a noweb/fortran function"
<<${1:module}: procedures>>=
  elemental function ${2:procedure} (${3:args}) result (${4:y})
    real(default) :: $4
		${5:implementation}
  end function $2

@ %def $2
@
endsnippet

snippet ntp "A template for a noweb/fortran type bound procedure"
<<${1:module}: ${2:class}: TBP>>=
  procedure :: ${3:procedure} => ${2/ /_/g}_$3
<<$1: procedures>>=
	pure subroutine ${2/ /_/g}_$3 (${2/ /_/g})
		class(${2/ /_/g}_t), intent(${4:inout}) :: ${2/ /_/g}
		${5:implementation}
  end subroutine ${2/ /_/g}_$3

@ %def ${2/ /_/g}_$3
@
endsnippet

snippet npp "A template for a noweb/fortran public subroutine"
<<${1:module}: public>>=
	public :: ${2:procedure}
<<$1: procedures>>=
	pure subroutine $2 (${3:args})
		${4:implementation}
  end subroutine $2

@ %def $2
@
endsnippet

snippet npf "A template for a noweb/fortran public function"
<<${1:module}: public>>=
	public :: ${2:procedure}
<<$1: procedures>>=
  elemental function $2 (${3:args}) result (${4:y})
    real(default) :: $4
		${5:implementation}
  end function $2

@ %def $2
@
endsnippet

snippet nup "A template for a noweb/fortran unit test procedure"
<<${1:module}: execute tests>>=
  call test(${1/ /_/g}_${2:i}, "${1/ /_/g}_$2", &
						"${3:description}", u, results)
<<$1: UT: procedures>>=
	subroutine ${1/ /_/g}_$2 (u)
    integer, intent(in) :: u
		${4:implementation}
  end subroutine ${1/ /_/g}_$2

@ %def ${1/ /_/g}_$2
@
endsnippet

snippet nut "A template for noweb/fortran unit tests"
\subsection{Unit tests}
<<${1:module}: UT: public>>=
  public :: ${1/ /_/g}_test
<<$1: UT: procedures>>=
  subroutine ${1/ /_/g}_test (u, results)
    integer, intent(in) :: u
    type(test_results_t), intent(inout) :: results
  <<$1: execute tests>>
  end subroutine ${1/ /_/g}_test

@ %def ${1/ /_/g}_test
@
endsnippet
