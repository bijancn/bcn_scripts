# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# .vim/Ultisnips/noweb.snippets - Snippets that are defined for Noweb files
#
# Copyright (C) 2014         Bijan Chokoufe Nejad         <bijan@chokoufe.com>
# Recent versions:  https://github.com/bijancn/bcn_scripts
#
# This source code is free software that comes with ABSOLUTELY NO WARRANTY; you
# can redistribute it and/or modify it under the terms of the GNU GPL Version 2:
# http://www.gnu.org/licenses/gpl-2.0-standalone.html
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

extends fortran
extends tex

# Chunks
snippet nch "Create new noweb chunk"
@
<<${1:chunkname}>>=
@ %def
endsnippet


snippet nec "Extract Chunk" b
<<$1>>
<<${1:chunkname}>>=
${0:${VISUAL}}
@
endsnippet


snippet npa "Template for a noweb/fortran parameter"
@
<<${1:module}: parameters>>=
	${2:type}, parameter :: ${3:name} = ${4:value}
@ %def $3
endsnippet


snippet nppa "Template for a noweb/fortran public parameter"
@
<<${1:module}: public>>=
	public :: ${3:name}
<<$1: parameters>>=
	${2:type}, parameter :: $3 = ${4:value}
@ %def $3
endsnippet


snippet nin "Template for a noweb/fortran interface"
@
<<${1:module}: public>>=
	public :: ${2:function}
<<$1: interfaces>>=
	interface $2
		 module procedure $2_${3:type}
	end interface
@ %def $2
endsnippet


snippet ntd "Template for a noweb/fortran deferred procedure with interface"
@
<<${1:module}: ${2:class}: TBP>>=
	procedure (${2/ /_/g}_${3:function}), deferred :: $3
<<$1: interfaces>>=
  abstract interface
     subroutine ${2/ /_/g}_$3 (${2/ /_/g}, ${4:args})
       import
       class(${2/ /_/g}_t), intent(${5:inout}) :: ${2/ /_/g}
       ${6:type} :: $4
     end subroutine ${2/ /_/g}_$3
  end interface

@ %def ${2/ /_/g}_$3
endsnippet


snippet nti "Template for a noweb/fortran generic binding"
@
<<${1:module}: ${2:class}: TBP>>=
	generic :: ${3:function} => ${2/ /_/g}_$3_${4}, ${2/ /_/g}_$3_${5}
	procedure, private :: ${2/ /_/g}_$3_$4, ${2/ /_/g}_$3_$5
@ %def $3
endsnippet


snippet nmo "Template for the typical structure of a noweb/fortran module"
@
<<[[${1:name}.f90]]>>=
<<File header>>

module $1

<<Use kinds>>
	${2:use dependencies}

<<Standard module head>>

<<${1/_/ /g}: public>>

<<${1/_/ /g}: parameters>>

<<${1/_/ /g}: types>>

<<${1/_/ /g}: interfaces>>

contains

<<${1/_/ /g}: procedures>>

end module $1
@ %def $1
endsnippet


snippet nty "public type"
@
<<${1:module}: public>>=
	public :: ${2:type}_t
<<$1: types>>=
	type :: $2_t
		 ${3: values}
	contains
	 <<$1: ${2/_/ /g}: TBP>>
	end type $2_t

@ %def $2_t
endsnippet


snippet nsu "pure subroutine"
@
<<${1:module}: procedures>>=
	pure subroutine ${2:procedure} (${3:args})
		${4:implementation}
	end subroutine $2

@ %def $2
endsnippet


snippet npsu "public pure subroutine"
@
<<${1:module}: public>>=
	public :: ${2:procedure}
<<$1: procedures>>=
	pure subroutine $2 (${3:args})
		${4:implementation}
	end subroutine $2

@ %def $2
endsnippet


snippet nfu "elemental function"
@
<<${1:module}: procedures>>=
	elemental function ${2:procedure} (${3:args}) result (${4:y})
		real(default) :: $4
		${5:implementation}
	end function $2

@ %def $2
endsnippet


snippet npf "public elemental function"
@
<<${1:module}: public>>=
	public :: ${2:procedure}
<<$1: procedures>>=
	elemental function $2 (${3:args}) result (${4:y})
		real(default) :: $4
		${5:implementation}
	end function $2

@ %def $2
endsnippet


snippet ntp "type bound procedure"
@
<<${1:module}: ${2:class}: TBP>>=
	procedure :: ${3:procedure} => ${2/ /_/g}_$3
<<$1: procedures>>=
	pure subroutine ${2/ /_/g}_$3 (${2/ /_/g})
		class(${2/ /_/g}_t), intent(${4:inout}) :: ${2/ /_/g}
		${5:implementation}
	end subroutine ${2/ /_/g}_$3

@ %def ${2/ /_/g}_$3
endsnippet


snippet ntf "type bound function"
@
<<${1:module}: ${2:class}: TBP>>=
	procedure :: ${3:procedure} => ${2/ /_/g}_$3
<<$1: procedures>>=
	pure function ${2/ /_/g}_$3 (${2/ /_/g}) result (${4:y})
		class(${2/ /_/g}_t), intent(${5:inout}) :: ${2/ /_/g}
		${6:implementation}
	end function ${2/ /_/g}_$3

@ %def ${2/ /_/g}_$3
endsnippet


snippet ntw "type bound write procedure"
@
<<${1:module}: ${2:class}: TBP>>=
	procedure :: write => ${2/ /_/g}_write
<<$1: procedures>>=
	subroutine ${2/ /_/g}_write (${2/ /_/g}, unit)
		class(${2/ /_/g}_t), intent(in) :: ${2/ /_/g}
		integer, intent(in), optional :: unit
		integer :: u
		u = given_output_unit (unit);  if (u < 0)  return
		write (u, *) ${2/ /_/g}%${3:member}
	end subroutine ${2/ /_/g}_write

@ %def ${2/ /_/g}_write
endsnippet


snippet as "assert"
call assert (u, ${1:condition}, "$1")
endsnippet


snippet ase "assert_equal"
call assert_equal (u, ${1:condition}, ${2:ref_value}, "$1")
endsnippet


snippet nut "unit tests boilerplate"
@
\subsection{Unit tests}
Test module, followed by the corresponding implementation module.
<<[[${1/ /_/g}_ut.f90]]>>=
<<File header>>

module ${1/ /_/g}_ut
  use unit_tests
  use ${1/ /_/g}_uti
  
<<Standard module head>>

<<${1:module}: public test>>

contains
  
<<$1: test driver>>

end module ${1/ /_/g}_ut
@ %def ${1/ /_/g}_ut
@
<<[[${1/ /_/g}_uti.f90]]>>=
<<File header>>

module ${1/ /_/g}_uti

  use ${1/ /_/g}

<<Standard module head>>

<<$1: test declarations>>

contains

<<$1: tests>>

end module ${1/ /_/g}_uti
@ %def ${1/ /_/g}_ut
@ API: driver for the unit tests below.
<<$1: public test>>=
  public ::${1/ /_/g}_test
<<$1: test driver>>=
  subroutine ${1/ /_/g}_test (u, results)
    integer, intent(in) :: u
    type(test_results_t), intent(inout) :: results
  <<$1: execute tests>>
  end subroutine ${1/ /_/g}_test

@  %def ${1/ /_/g}_test
endsnippet


snippet nup "unit test procedure"
@
\subsubsection{${1:Purpose}}
<<${2:module}: execute tests>>=
	call test(${2/ /_/g}_${3:i}, "${2/ /_/g}_$3", &
						"$1", u, results)
<<$2: test declarations>>=
	public :: ${2/ /_/g}_$3
<<$2: tests>>=
	subroutine ${2/ /_/g}_$3 (u)
		integer, intent(in) :: u
		write (u, "(A)")  "* Test output: ${2/ /_/g}_$3"
		write (u, "(A)")  "*   Purpose: $1"
		write (u, "(A)")

		${4:implementation}

		write (u, "(A)")
		write (u, "(A)")  "* Test output end: ${2/ /_/g}_$3"
	end subroutine ${2/ /_/g}_$3

@ %def ${2/ /_/g}_$3
endsnippet
