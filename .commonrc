function format_seconds() {
  read 1
  (($1 >= 3600)) && printf '%02dh ' $(($1 / 3600))
  (($1 >= 60)) && printf '%02dm ' $(($1 / 60 % 60))
  printf '%02d%ss\n' $(($1 % 60))
}

function how-much-longer() {
    monday=`date -v-monday +'%Y-%m-%d'`
    USER_AGENT='user_agent=api_test'
    API='https://api.track.toggl.com/reports/api/v2'
    WORK_SPACE="workspace_id=`cat ~/.togglrc | jq -r '.workspace'`"
    TOKEN="`cat ~/.togglrc | jq -r '.api_token'`:api_token"
    json=`curl -s -u $TOKEN -X GET "$API/weekly?$WORK_SPACE&since=$monday&$USER_AGENT"`
    array=`echo $json | jq '.week_totals | map(select( . != null)) | map(./1000)'`
    echo "Today, I'll continue working for `echo $array | jq 'nth(length-2) | -(.-(8*3600))' | format_seconds` ⏰"
    echo "This week, I already worked `echo $array | jq 'last' | format_seconds` 💪"
    echo "Meaning, I'm `echo $array | jq '.[:length-1] | map(-(.-(8*3600))) | reduce .[] as $num (0; .+$num) ' | format_seconds` away from 8h/day average 🤓"
}

alias kdev='kubectx DEV'
alias kprrod='kubectx PROD'
alias kdebug='kubectl run my-shell2 --rm -i --tty --image robertxie/ubuntu-nettools -- bash'
alias clean-targets='rm -rf */target target'
alias ct=clean-targets
alias flush='sudo dscacheutil -flushcache;sudo killall -HUP mDNSResponder'
alias dodo='docker run -it -v `pwd`:`pwd` -w `pwd`'

function kall () {
  kubectx DEV
  for i in master stable qa ; do
    echo "### $i ###" && kubectl -n $i $@
  done
}

function kallprod () {
  kall $@
  kubectx PROD
  echo "### PROD ###" && kubectl -n prod $@
  kubectx DEV
}

# eval "$(fasd --init auto)"

export CLICOLOR=1
export LSCOLORS=ExFxCxDxBxegedabagacad
alias dcu="docker-compose up"
alias dka="docker ps -aq | xargs docker rm -f"
alias dcd="docker-compose down"

export GPG_TTY=$(tty)
export arch=`getconf LONG_BIT`

export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export LANGUAGE=en_US.UTF-8

# VI mode for bash
set -o vi

# Use vim for my diffing functions
export difftool='vimdiff'

#============#
#  hardware  #
#============#
# Max out machine limits
ulimit -t unlimited              # cputime
ulimit -d unlimited              # datasize
# Bad option on new Mac?
# ulimit -m unlimited              # memoryuse

# This is for processes spawned by CPUs within !OMP PARALLEL DO
export KMP_STACKSIZE=500000000
export KMP_AFFINITY='compact'

# Number of cores for the OpenMP library
export OMP_NUM_THREADS=4
export GOMP_CPU_AFFINITY="0 2 4 6 8 10 1 3 5 7 9 11"

#=========#
#  paths  #
#=========#
prepend-path () {
  export PATH=$1/bin:$PATH
}
prepend-pure-path () {
  export PATH=$1:$PATH
}
prepend-pure-libpath () {
  export LD_LIBRARY_PATH=$1:$LD_LIBRARY_PATH
}
prepend-libpath () {
  export LD_LIBRARY_PATH=$1/lib64:$1/lib:$LD_LIBRARY_PATH
}
prepend-all-paths () {
  prepend-path $1
  prepend-libpath $1
}
add-pythonpath () {
  export PYTHONPATH=$PYTHONPATH:$1
}
command-exists () {
  type "$1" &> /dev/null ;
}

export CXXFLAGS=-std=c++11
alias vim=nvim
alias bu='brew update && brew upgrade && brew cleanup'

load-paths () {
  prepend-all-paths /usr/local

  export LDFLAGS="-L/usr/local/opt/zlib/lib "
  export CPPFLAGS="-I/usr/local/opt/zlib/include "
  export LDFLAGS="$LDFLAGS -L/usr/local/opt/openssl/lib "
  export CFLAGS="$CFLAGS -I/usr/local/opt/openssl/include "

  export GOPATH=$HOME/go
  prepend-path $GOPATH

  # python
  add-pythonpath $HOME/bcn_scripts/include
  add-pythonpath $HOME/termstyle
  add-pythonpath $HOME/pydflatex

  source $HOME/.jimdo.sh

  export TEXMFCNF=${HOME}/texmf:${TEXMFCNF}
  export HOMETEXMF=${HOME}/texmf:${HOMETEXMF}
  export TEXMFHOME=${HOME}/texmf:${TEXMFHOME}
}

if test -z $PATHS_LOADED ; then
  load-paths
  export PATHS_LOADED=true
fi

# perl
export PERL5LIB=$install/lib/perl5

function my-ip() # Get IP adress on ethernet.
{
    MY_IP=$(/sbin/ifconfig eth0 | awk '/inet/ { print $2 } ' |
      sed -e s/addr://)
    echo ${MY_IP:-"Not connected"}
}

alias restart-network='sudo service network-manager restart'

#==============================================================================#
#                                  FUNCTIONS                                   #
#==============================================================================#

# Swap 2 files, if they exist
function swap() {
    local TMPFILE=tmp.$$
    [ $# -ne 2 ] && echo "swap: 2 arguments needed" && return 1
    [ ! -e $1 ] && echo "swap: $1 does not exist" && return 1
    [ ! -e $2 ] && echo "swap: $2 does not exist" && return 1
    mv "$1" $TMPFILE
    mv "$2" "$1"
    mv $TMPFILE "$2"
}

function all () {
  for i in *$2*; do $1 "$i" & done
}

function bisect () {
  lines=$(wc -l "$1")
  filelength=`expr length $1`
  lines=${lines:0:-$filelength}
  lines=$(expr $lines / 2)
  echo "Bisecting $1 in two files with $lines lines each."
  split -dl $lines "$1" "$1."
}

function mkdircd () {
  mkdir -p "$@" && eval cd "\"\$$#\"";
}

function ft-renamer () {
  for file in *.$1; do mv "$file" "${file%.$1}.$2"; done
}

function replace-by () {
  for file in *$1*; do mv $file ${file/$1/$2}; done
}

function fa () {
  find . -iname "*$1*"
}
alias rgrep='grep -r'
alias hgrep='history | grep '

alias show-top-processes="top -b -n 1 | grep -v ' root ' | head -n 12  | tail -n 8"
alias show-top-swappiness-usage='for file in /proc/*/status ; do echo "$file: `cat $file | grep -i swap`" ; done |  sort -k 3 -n -r | head'
function show-top-swappiness-processes() {
  for file in /proc/*/status ; do echo "$file: `cat $file | grep -i swap`" ; done |  sort -k 3 -n -r | head | sed 's/\/proc\///' | sed 's/\/status.*//' | xargs ps
}

#==============================================================================#
#                                  SHORTHANDS                                  #
#==============================================================================#
#============#
#  shortest  #
#============#
alias k="kill -9"
alias x="exit"
alias p="python"
alias t="/usr/bin/time"
alias c="./configure"

alias ac="autoreconf"
alias bp="bitpocket"

#===========#
#  configs  #
#===========#
alias brc="vim ~/.bashrc"
alias crc="vim ~/.commonrc"
alias hrc="vim ~/.hammerspoon/init.lua"
alias lrc="vim ~/.config/awesome/rc.lua"
alias mrc="vim ~/.muttrc"
alias src="vim ~/.ssh/config"
alias vrc="vim ~/.vimrc"
alias zrc="vim ~/.zshrc"

#====================#
#  change directory  #
#====================#
alias cd-="cd -"
alias cd..="cd .."
alias ..="cd .."
alias ..2="cd ../.."
alias ..3="cd ../../.."
alias ..4="cd ../../../.."
alias ..5="cd ../../../../.."

#=========#
#  lists  #
#=========#
alias lsd='ls -d */'
alias ll='ls -lh'
alias la='ls -lah'
alias lad='ls -lah -d */'
alias lk='ls -lSrh'         #  Sort by size, biggest last.

alias mv='mv -v'
alias md='mkdir'
alias mdc='mkdircd'
alias rb='sudo reboot'
alias re='export DISPLAY=:0; cinnamon &'
alias du-dirs='du -sh -- * | sort -h'
alias du-subdirs='du -h | sort -h'

alias show-cpu-info='lscpu; grep -i "model name" /proc/cpuinfo | uniq'

function show-disk-speed () {
  dd if=/dev/zero of=$1/output conv=fdatasync bs=100k count=1k; rm -f $1/output
}

function show-big-files () {
  find . -type f -size +20000k -exec ls -lh {} \; | awk '{ print $9 ": " $5 }'
}

#==============================================================================#
#                                     GIT                                      #
#==============================================================================#
# Ignore changes to local file in status,
# useful for machine-specifc configs (followed by file)
alias gituiu='git update-index --assume-unchanged'

# Remove the above flag again to be able to commit changes of that file
alias gituinu='git update-index --no-assume-unchanged'

function gitignore () {
  echo "$1" >> .gitignore
}

function git-changelog () {
  local last_tag=$(git describe --tags --abbrev=0)
  echo "Changes since last tag: ${last_tag}"
  git log --oneline --decorate ${last_tag}..HEAD
}

function git-changelog-old () {
  git log $(git tag --sort version:refname | tail -2 | sed ':a;N;$!ba;s/\n/../g') --pretty=oneline --abbrev-commit
}

function git-set-upstream {
  branch=$(git rev-parse --abbrev-ref HEAD)
  git branch --set-upstream-to=origin/${branch} ${branch}
}

alias gitpf='git push --force-with-lease'

# Add a single file or directory
alias gita='git add'

# Move a file with meta information
alias gitmv='git mv'

# Move a file with meta information
alias gitrm='git rm'

# Commit the staged changes to the HEAD
alias gitc='git commit -m'

# Clean the current directory of all build products and other non-tracked files
alias gitcl='git clean -x -i'

# Interactively add chunks and see what u have done (CUSTOM ALIAS)
alias giti='git interactive'

# See the current status
alias gits='git status'

alias gitca='git commit --amend'

alias gitfa='git fetch --all'

# See status faster but does not track new files
alias gitS='git status -uno .'

# Pull from the remote
alias gitl='git pull --rebase'

# Pull from the remote and overwrite all local changes (CUSTOM ALIAS)
alias gitlh='git pullhard'

# Push to the remote
alias gitp='git push'

# Push all tags and branches to the remote
alias gitpa='git push --all origin'

# See the latest commits? (CUSTOM ALIAS)
alias gitn='git new'

alias gitrc='git rebase --continue'
alias gitri='git rebase -i origin/master'

#===============#
#  differences  #
#===============#
# Show the diff between unstaged changes (working dir) against the index
# If followed by master..branch it shows complete diff between branches
alias gitd='git diff'

# Show the diff between staged changes (index) against the current HEAD
alias gitdc='git diff --cached'

# Show all the changes since the last commit, staged or not
alias gitdh='git diff HEAD'

# Show which files have changed between branches (followed by: master..branch)
alias gitdb='git diff --stat --color'

#============#
#  branches  #
#============#
# Checkout another branch or file from it 'gite BRANCH -- FILE'
alias gite='git checkout'

# Create new branch
alias gitcb='git checkout -b'

# Cherry pick a commit from another branch
alias gitcp='git cherry-pick'

# Create a new branch (followed by branchname)
alias gitb='git branch'

# Rename your current branch (followed by newbranchname)
alias gitbm='git branch -m'

# Switch to svn and get updates from svn
alias gsu='gite svn ; svnu ; gits'

#=================#
#  VISUALIZATION  #
#=================#
# Creates a dot file. TODO: Add the pipe through dot and show the pdf
alias gitm='git makedot'
alias gitml='git mylog'
alias gitml2='git morelog'
alias gitml3='git shortlog'

function show-path () {
  tr ':' '\n' <<< "$PATH"
}

function show-python-path () {
  tr ':' '\n' <<< "$PYTHONPATH"
}

function show-lib-path () {
  tr ':' '\n' <<< "$LD_LIBRARY_PATH"
}

#==========#
#  github  #
#==========#
function github {
  git clone git@github.com:$1/$2.git
}


################################################################################
#                                     SBT                                      #
################################################################################
# alias sbt='sbt -mem 8192'
export SBT_GLOBAL_SERVER_DIR=$HOME/sbt
export SBT_OPTS='-Xms1G -Xmx8G -Xss8M -XX:MaxMetaspaceSize=1000m -XX:MetaspaceSize=500m -XX:+CMSClassUnloadingEnabled'

################################################################################
#                                    DOCKER                                    #
################################################################################
# alias docker-stop-all="docker stop $(docker ps -a -q)"
# alias docker-rm-all="docker rm $(docker ps -a -q)"

function show-my-PRs-of-this-month () {
  curl -s -X GET "$GITHUB_API/search/issues?q=author:bijan-chokoufe+org:hpo+is:pr+created:>=2017-12-01" | jq ".items[] | .title"
}

alias vim=nvim

alias grl='./gradlew clean'
alias grb='./gradlew compileTestKotlin'
alias grlb='./gradlew clean compileTestKotlin'
alias grk='./gradlew ktlintFormat'
alias grf='./gradlew ktlintFormat'
alias grc='./gradlew check'

function pull-it () {
    cd $1 && git pull && cd ..
}

alias gs='./git-summary/git-summary'
alias pull-all="ls -d */ | parallel -j64 'echo -n {}... && git -C {} pull'"

export LOADED=true

# vim: set filetype=sh
