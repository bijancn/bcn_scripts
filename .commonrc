# vim: set filetype=sh

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# .commonrc - configurations for bash/zsh. Migrated from .bashrc in 2016.
#
# Copyright Â©          Bijan Chokoufe Nejad          <bijan@chokoufe.com>
#
# This source code is free software that comes with ABSOLUTELY NO WARRANTY; you
# can redistribute it and/or modify it under the terms of the GNU GPL Version 2:
# http://www.gnu.org/licenses/gpl-2.0-standalone.html
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

export GPG_TTY=$(tty)
export arch=`getconf LONG_BIT`

# Fix for strange dbus error ocurring when starting gnome-open from vim
# put this in .xinitrc
#eval $(dbus-launch --sh-syntax)
#export DBUS_SESSION_BUS_ADDRESS
#export DBUS_SESSION_BUS_PID

export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export LANGUAGE=en_US.UTF-8

export ez_host='95.143.172.252'
export ez_port=64835

# VI mode for bash
set -o vi

# Use vim for my diffing functions
export difftool='vimdiff'

#============#
#  hardware  #
#============#
# These should be in a local file

# Max out machine limits
ulimit -t unlimited              # cputime
ulimit -d unlimited              # datasize
ulimit -m unlimited              # memoryuse

# These are usually not permitted
#ulimit -f unlimited              # filesize
#ulimit -c unlimited              # coredumpsize
#ulimit -v unlimited              # vmemoryuse
#ulimit -s unlimited              # stacksize
#ulimit -n unlimited              # descriptors
#ulimit -l unlimited              # memorylocked
#ulimit -u unlimited              # maxproc

# This is for processes spawned by CPUs within !OMP PARALLEL DO
export KMP_STACKSIZE=500000000
export KMP_AFFINITY='compact'

# Number of cores for the OpenMP library
export OMP_NUM_THREADS=4
export GOMP_CPU_AFFINITY="0 2 4 6 8 10 1 3 5 7 9 11"

parallel_jobs=
if test -r /proc/cpuinfo; then
  n=`grep -c '^processor' /proc/cpuinfo`
  if test $n -gt 1; then
    parallel_jobs="-j `expr \( 1 \* $n \) / 3`"
  else
    parallel_jobs="-j $n"
  fi
fi

# Path for FORM temp files
export FORMTMP=/tmp

#===========#
#  folders  #
#===========#
export wingames=/data/win_games
export lingames=/data/lnx_games
export syncd=$HOME/safe
export install=$HOME/install

#=========#
#  paths  #
#=========#
prepend-path () {
  export PATH=$1/bin:$PATH
}
prepend-pure-path () {
  export PATH=$1:$PATH
}
prepend-pure-libpath () {
  export LD_LIBRARY_PATH=$1:$LD_LIBRARY_PATH
}
prepend-libpath () {
  export LD_LIBRARY_PATH=$1/lib64:$1/lib:$LD_LIBRARY_PATH
}
prepend-all-paths () {
  prepend-path $1
  prepend-libpath $1
}
add-pythonpath () {
  export PYTHONPATH=$PYTHONPATH:$1
}
command-exists () {
  type "$1" &> /dev/null ;
}

export CXXFLAGS=-std=c++11

load-paths () {
  export NVM_DIR="$HOME/.nvm"
  if ! test -s "$NVM_DIR/nvm.sh" ; then
    echo ">> installing nvm <<"
    git clone https://github.com/creationix/nvm.git "$NVM_DIR"
    cd "$NVM_DIR"
    git checkout `git describe --abbrev=0 --tags --match "v[0-9]*" origin`
    source "$NVM_DIR/nvm.sh"
    nvm install node
  fi
  source "$NVM_DIR/nvm.sh"  # This loads nvm

  # export RVM_DIR="$HOME/.rvm"
  # prepend-path $RVM_DIR
  # if ! test -s "$RVM_DIR/scripts/rvm" ; then
  #   echo ">> installing rvm <<"
  #   curl -sSL https://get.rvm.io | bash -s -- --ignore-dotfiles
  #   source "$RVM_DIR/scripts/rvm"
  #   rvm install ruby --latest
  # fi
  # source "$RVM_DIR/scripts/rvm" # This loads rvm

  # ifort
  intel_dir=/opt/intel
  if test -f $intel_dir/bin/compilervars.sh -a $arch = 64; then
    source $intel_dir/bin/compilervars.sh intel64
  elif test -f $intel_dir/2016/bin/compilervars.sh -a $arch = 64; then
    source $intel_dir/2016/bin/compilervars.sh intel64
    #source $intel_dir/2011/vtune_amplifier_xe/amplxe-vars.sh
  fi

  if [[ $arch == *64* ]]; then
    export desy_tex=/afs/desy.de/products/texlive/2012/bin/x86_64-linux
    prepend-all-paths $install
  else
    export desy_tex=/afs/desy.de/products/texlive/2012/bin/i386-linux
  fi
  prepend-pure-path $desy_tex
  prepend-path $HOME/.gem/ruby/1.9.1

  prepend-path $HOME/bcn_scripts

  prepend-pure-path $HOME/jrfonseca.gprof2dot

  prepend-all-paths /usr/local

  # python
  add-pythonpath $HOME/bcn_scripts/include
  add-pythonpath $HOME/Python-GoogleCalendarParser
  add-pythonpath $HOME/eZchat
  add-pythonpath $HOME/.vim/plugged/vim-eZchat/autoload
  add-pythonpath $HOME/termstyle
  add-pythonpath $HOME/pydflatex

  # added by Miniconda3 installer
  # export PATH="/home/bijan/miniconda3/bin:$PATH"

  tmp0=/nfs/theoc/data2/bcho/sl6
  tmp1=/nfs/theoc/data/bcho/bird
  tmp2=/data/bcho
  if [ -d $tmp0 ]; then
    export hep=$tmp0
  elif [ -d $tmp1 ]; then
    export hep=$tmp1
  elif [ -d $tmp2 ]; then
    export hep=$tmp2
  fi

  # vim
  # if [ -f /usr/local/bin/nvim ]; then
  #   export VIMRUNTIME=/usr/local/share/nvim/runtime/
  #   export vim=/usr/local/bin/nvim
  # elif [ -f $hep/install/bin/vim ]; then
  #   export VIMRUNTIME=$hep/install/share/vim/vim80/
  #   export vim=$hep/install/bin/vim
  # else
  #   export VIMRUNTIME=/usr/local/share/vim/vim80/
  #   export vim=/usr/local/bin/vim
  # fi
  # export EDITOR=$vim
  # export SVN_EDITOR=$vim
  # export VISUAL=$vim

  if [ -n "$hep" ]; then
    export hep_install=$hep/install
    prepend-libpath $hep/OpenLoops
    prepend-pure-libpath $hep/recola-collier-1.2/COLLIER-1.1
    prepend-pure-libpath $hep/recola-collier-1.2/recola-1.2
    prepend-all-paths $hep/gosam/local
    prepend-all-paths $hep_install
    add-pythonpath $hep_install/lib/python
    add-pythonpath $hep_install/lib/python2.7/site-packages
    export CPATH=$hep_install/include:$CPATH
    export LATEXINPUTS=${HOME}/texmf:$hep_install/share/texmf/tex/latex/misc:$LATEXINPUTS
    export TEXINPUTS=${HOME}/texmf:$hep_install/share/texmf/tex/latex/misc:$TEXINPUTS
    export LCIO=$hep_install
    export CXX=$hep_install/bin/c++
  fi
  export TEXMFCNF=${HOME}/texmf:${TEXMFCNF}
  export HOMETEXMF=${HOME}/texmf:${HOMETEXMF}
  export TEXMFHOME=${HOME}/texmf:${TEXMFHOME}
}

if test -z $PATHS_LOADED ; then
  load-paths
  export PATHS_LOADED=true
fi

function load-whizard-gfortran() {
  export whizard_install=/nfs/theoc/data2/bcho/sl6/whizard_install_gfortran
  if [ -d "$whizard_install" ]; then
     prepend-all-paths $whizard_install
  fi
}

function load-whizard-ifort() {
  export whizard_install=/nfs/theoc/data2/bcho/sl6/whizard_install_ifort
  if [ -d "$whizard_install" ]; then
     prepend-all-paths $whizard_install
  fi
}

pythia-configure(){
  packages='--with-hepmc2=$install --with-lhapdf6=$install --with-fastjet3=$install'
  ./configure --prefix=$install $packages
}
pythia-configure-desy(){
  packages='--with-hepmc2=$hep_install --with-lhapdf6=$hep_install --with-fastjet3=$hep_install'
  ./configure --prefix=$install $packages
}

checkout-openloops(){
  svn checkout http://openloops.hepforge.org/svn/OpenLoops/branches/public ./OpenLoops
  cd OpenLoops
  printf '[OpenLoops]\nprocess_repositories=public, whizard\ncompile_extra=1' > openloops.cfg
  ./scons
  ./openloops libinstall ppzj ppzjj ppll ppllj pplljj pplljjj eett eehtt eevvjj ee_tt_wwjj tbw
  cd examples
  ../scons
  ./OL_fortran
}

checkout-openloops-ifort(){
  svn checkout http://openloops.hepforge.org/svn/OpenLoops/branches/public ./OpenLoops_ifort
  cd OpenLoops_ifort
  printf '[OpenLoops]\nprocess_repositories=public, whizard\ncompile_extra=1\nfortran_compiler=ifort' > openloops.cfg
  ./scons
  ./openloops libinstall ppzj ppzjj ppll ppllj pplljj pplljjj eett eehtt eevvjj ee_tt_wwjj tbw
  cd examples
  ../scons
  ./OL_fortran
}

checkout-lcio(){
  svn co svn://svn.freehep.org/lcio/trunk lcio
  cd lcio
  mkidr build
  cd build
  cmake -DCMAKE_INSTALL_PREFIX=../../install ..
  make -j10
  make install
}

# perl
export PERL5LIB=$install/lib/perl5

# opam
#if command-exists opam; then
  #eval `opam config env`
#fi

# pydflatex
if command-exists pydflatex; then
  export pdftool=pydflatex
fi

function get-inspire-bibtex () {
  curl -s "https://inspirehep.net/search?p=$1&of=hx&em=B&sf=year&so=d" | sed '/div>\|<div\|pre>/d'
}

function replace-inspire () {
  sed -i "s,$1,${2}," *.tex *.bib
}

function get-arxiv-number () {
  get-inspire-bibtex $1 | grep eprint | sed 's/.*= "//' | sed 's/",.*//' 
}

function replace-inspire-extra () {
  result=`get-arxiv-number $1`
  if [ ${#result} -ge 1 ] ; then
    echo "Replacing $1"
    sed -i "s,$1,${result}," *.tex *.bib
  fi
}
alias rin=replace-inspire-extra

function get-articles-and-proceedings () {
  grep '@article\|@inproceedings' $1 | sed 's/@article{//' | sed 's/@inproceedings{//' | sed 's/,//'
}

function get-defined-acronyms () {
  grep '  \\acro' main.tex | sed 's/  \\acro{//' | sed 's/}{.*//'
}

function check-if-used () {
  if grep -q '\\ac{'$1 *.tex; then
    echo "used"
  else
    echo "not used: $1"
  fi
}

function check-if-defined-acronyms-are-used () {
  for i in `get-defined-acronyms` ; do check-if-used $i ; done
}

#==================#
#  compiler flags  #
#==================#
#export FCFLAGS="-fmax-errors=1 -O2"
#export CFLAGS="-fPIC"

#====================#
#  printing at DESY  #
#====================#
# export CUPS_SERVER=cups-hep.desy.de
alias prnt='lp -d t00ps1 -o sides=two-sided-long-edge'
alias prnt-2p='lp -d t00ps1 -o sides=two-sided-long-edge -o number-up=2'
function prnt-rng() {
  lp -d t00ps1 -o sides=two-sided-long-edge -o page-ranges=$1-$2 $3
}
ONESIDE='-o sides=one-sided'
TWOSIDE='-o sides=two-sided-long-edge'
COLPRINT='-o InputSlot=1Tray  -o scaling=100 -o fit-to-page -Ppubcp1'
POSTER='-o PageSize=A0 -o scaling=100 -o fit-to-page -Ppubcp4a0'
A4='-o PageSize=A4'
A3='-o PageSize=A3'
alias prnt-1s="lp -d t00ps1 $ONESIDE $A4"
alias prntA4-1s-color="lpr $ONESIDE $COLPRINT"
alias prntA4-2s-color="lpr $TWOSIDE $COLPRINT $A4"
alias prntA3-1s-color="lpr $ONESIDE $COLPRINT $A3"
alias prntA0-1s-color="lpr $ONESIDE $POSTER"

#=======#
#  IPs  #
#=======#
if [ -f $HOME/cloud/keys/IPs.sh ]; then
  source $HOME/cloud/keys/IPs.sh
fi

function my-ip() # Get IP adress on ethernet.
{
    MY_IP=$(/sbin/ifconfig eth0 | awk '/inet/ { print $2 } ' |
      sed -e s/addr://)
    echo ${MY_IP:-"Not connected"}
}

alias restart-network='sudo service network-manager restart'

#=============#
#  nosetests  #
#=============#
nosetests_cover_cmd="nosetests --with-coverage --cover-erase --cover-tests --cover-package=\$(ls *.py | sed -r 's/[.]py$//' | fgrep -v '.' | paste -s -d ',') "
alias -- nosetests-cover="$nosetests_cover_cmd"
alias -- nosetests-cover-sort="$nosetests_cover_cmd 2>&1 | fgrep '%' | sort -nr -k 4"

#  --cover-min-percentage=60 this doesnt show output of failing tests
alias nt='nosetests --with-coverage --with-timer --rednose --cover-erase'

#=========#
#  cmake  #
#=========#
function cmake-recreate() {
  rm *
  cmake -D CMAKE_Fortran_COMPILER="$1" -D CMAKE_Fortran_FLAGS="$2" ../..
}

#==========#
#  custom  #
#==========#
# Current date in ISO norm
export today=`date -I`

# Acronym usable for UltiSnips and other
export USER_ACR=bcn

# Set the title of terminal
function set-title() {
  echo -en "\e]0;$1\a"
}

eval `dircolors ~/.dir_colorsrc`


#==============================================================================#
#                                    COLORS                                    #
#==============================================================================#
#==========#
#  normal  #
#==========#
Black='\e[0;30m'        # Black
Red='\e[0;31m'          # Red
Green='\e[0;32m'        # Green
Yellow='\e[0;33m'       # Yellow
Blue='\e[0;34m'         # Blue
Purple='\e[0;35m'       # Purple
Cyan='\e[0;36m'         # Cyan
White='\e[0;37m'        # White

#========#
#  bold  #
#========#
BBlack='\e[1;30m'       # Black
BRed='\e[1;31m'         # Red
BGreen='\e[1;32m'       # Green
BYellow='\e[1;33m'      # Yellow
BBlue='\e[1;34m'        # Blue
BPurple='\e[1;35m'      # Purple
BCyan='\e[1;36m'        # Cyan
BWhite='\e[1;37m'       # White

#==============#
#  background  #
#==============#
On_Black='\e[40m'       # Black
On_Red='\e[41m'         # Red
On_Green='\e[42m'       # Green
On_Yellow='\e[43m'      # Yellow
On_Blue='\e[44m'        # Blue
On_Purple='\e[45m'      # Purple
On_Cyan='\e[46m'        # Cyan
On_White='\e[47m'       # White

NC="\e[m"               # Color Reset

#==============================================================================#
#                                  FUNCTIONS                                   #
#==============================================================================#
# Check if a command has a version larger or equal than demanded
version-bigger () {
  version=`$1 --version | head -n1 | sed 's/[^0-9.]*\([0-9.]*\).*/\1/'`
  bigger=`version-compare.py $version $2`
  test "$bigger" = 'first' -o "$bigger" = 'equal'
}

# Swap 2 files, if they exist
function swap() {
    local TMPFILE=tmp.$$
    [ $# -ne 2 ] && echo "swap: 2 arguments needed" && return 1
    [ ! -e $1 ] && echo "swap: $1 does not exist" && return 1
    [ ! -e $2 ] && echo "swap: $2 does not exist" && return 1
    mv "$1" $TMPFILE
    mv "$2" "$1"
    mv $TMPFILE "$2"
}

function all () {
  for i in *$2*; do $1 "$i" & done
}

function extract() {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xvjf $1     ;;
      *.tar.gz)    tar xvzf $1     ;;
      *.bz2)       bunzip2 $1      ;;
      *.rar)       unrar x $1      ;;
      *.gz)        gunzip $1       ;;
      *.tar)       tar xvf $1      ;;
      *.tbz2)      tar xvjf $1     ;;
      *.tgz)       tar xvzf $1     ;;
      *.zip)       unzip $1        ;;
      *.Z)         uncompress $1   ;;
      *.7z)        7z x $1         ;;
      *)           echo "'$1' cannot be extracted via >extract<" ;;
    esac
  else
    echo "'$1' is not a valid file!"
  fi
}

function shrink-pdf () {
  fname=$(basename $1)
  echo $fname
  fbname=${fname%.*}
  echo $fbname
  gs -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dCompressFonts=true -r100 \
     -dCompatibilityLevel=1.4 -dPDFSETTINGS=/ebook \
     -sOutputFile=$fbname-small.pdf $1
}

function bundle-application () {
  pdftk anschreiben.pdf bchokoufe-cv.pdf bchokoufe-bachelor-master-zeugnis.pdf bchokoufe-abitur-zeugnis-small.pdf cat output bchokoufe.pdf
}

function convert-pdf-to-jpg {
  for i in $1; do convert -quality 100 -density 300 $i ${i}_c.jpg; done
}

function bisect () {
  lines=$(wc -l "$1")
  filelength=`expr length $1`
  lines=${lines:0:-$filelength}
  lines=$(expr $lines / 2)
  echo "Bisecting $1 in two files with $lines lines each."
  split -dl $lines "$1" "$1."
}

function rem-print-1s () {
  scp "$1" $ip:~/temp.pdf
  ssh $ip "lp -d lp-tp2 -o media=a4 -o sides=one-sided temp.pdf"
}

function rem-show () {
  scp "$1" $ip:~/temp.pdf
  ssh -X $ip "evince ~/temp.pdf"
}

function sshow () {
  scp $1:$2 .
  op $(basename $2)
}

function find-type () {
  rgrep "public :: ${1}_t\$" -B1
}

function make-dot () {
  dot -Tpdf -o ${1%.dot}.pdf $1
}

function vim-print () {
  vim -c 'hardcopy > ~/output.ps' -c quit "$1"
  ps2pdf ~/output.ps ./"$1".pdf
  rm ~/output.ps
}

function backup-settings () {
  sudo cp /etc/fstab ~/decrypted/scripts/backup/
  sudo cp ~/.local/share/keyrings ~/decrypted/scripts/backup/ -r
}

function kill-tty () {
  pid=$(ps -t $1 | grep 'bash' | head -c 6)
  kill -9 $pid
}

function mkdircd () {
  mkdir -p "$@" && eval cd "\"\$$#\"";
}

function ft-renamer () {
  for file in *.$1; do mv "$file" "${file%.$1}.$2"; done
}

function replace-by () {
  for file in *$1*; do mv $file ${file/$1/$2}; done
}

function wtz () {
  wget "$1" -O - | tar -xvz
}

# See BCN COLORITRC for customizing colors in output
function cit () {
  $1 2>&1 | colorit
}

function mm () {
  $difftool $1/$3 $2/$3
}

#======================#
#  surpressing output  #
#======================#
function op () {
  gnome-open "$1" &> /dev/null &
}

function si () {
  $1 &> /dev/null && echo "done with $1"
}

#===========#
#  finding  #
#===========#
function fa () {
  find -iname "*$1*"
}
alias rgrep='grep -r'
alias hgrep='history | grep '
# Narrowing greps search realms
#if version-bigger grep 2.6.3; then
  #a='--exclude-dir=.svn --exclude-dir=.git --exclude=*.swo --exclude-dir=_build '
  #b="$a--exclude=*.swp --exclude=Makefile.in --exclude-dir=_install"
  #alias rgrep="grep -r $b"
#fi

#========#
#  htop  #
#========#
if ! command-exists htop ; then
  alias htop=top
fi

alias show-top-processes="top -b -n 1 | grep -v ' root ' | head -n 12  | tail -n 8"
alias show-top-swappiness-usage='for file in /proc/*/status ; do echo "$file: `cat $file | grep -i swap`" ; done |  sort -k 3 -n -r | head'
function show-top-swappiness-processes() {
  for file in /proc/*/status ; do echo "$file: `cat $file | grep -i swap`" ; done |  sort -k 3 -n -r | head | sed 's/\/proc\///' | sed 's/\/status.*//' | xargs ps
}

#=============#
#  callgrind  #
#=============#
function callgrind-graph () {
  gprof2dot.py -f callgrind $1 | dot -Tpdf -o ${1}.pdf
}

function callgrind () {
  valgrind --tool=callgrind $1
}

#==============================================================================#
#                                  SHORTHANDS                                  #
#==============================================================================#
#============#
#  shortest  #
#============#
alias k="kill -9"
alias x="exit"
alias p="python"
alias t="/usr/bin/time"
alias c="./configure"
alias b="cd $HOME/trunk/_build"
alias i="impressive -s -ff -g 1200x1200+0+0 --cache memory --poll 1"

#========#
#  make  #
#========#
if command-exists colorit; then
  alias m="make -s V=0 $parallel_jobs | colorit"
  alias mV="make V=1 $parallel_jobs | colorit"
else
  alias m="make -s V=0 $parallel_jobs"
  alias mV="make V=1 $parallel_jobs"
fi

alias mi="make -s V=0 install > /dev/null"
alias mc="make -s V=0 check $parallel_jobs"
alias mcl="make -s V=0 clean $parallel_jobs"
alias wm="make -s V=0 $parallel_jobs && make -s V=0 -C src/ check $parallel_jobs"
alias s="scons $parallel_jobs"
alias scl="scons --clean $parallel_jobs"
alias ac="autoreconf"
alias bp="bitpocket"

#===========#
#  cluster  #
#===========#
alias qst="cit qstat"
function save-error-queue () {
  qstat | grep Eqw | awk '{print $1}' > error-queue
}

function save-queue () {
  qstat | grep ' qw' | awk '{print $1}' > queue
}

function running-jobs () {
  qstat | grep ' r' | awk '{print $1}'
}

function clean-queue () {
  for i in `cat queue` ; do
    qdel $i
  done
}

function remove-undesired () {
  rm -f deleted
  touch deleted
  for i in `cat folders`; do
    if test -z $(echo $i | grep sqrts ) ; then
      echo "$i, searching:" ;
      for j in `tac queue`; do
        if ! grep $j deleted; then
          res=`qstat -j $j | grep sge_o_workdir | awk '{print $2}'`
          if test "$res" = "$i" ; then
            echo "$j => $res"
            qdel $j
            echo $j >> deleted
            break
          fi
        fi
      done
    fi
  done
}

remove-all-but-templates () {
  git add *template.sin
  for i in ^*template.sin ; do rm -rf $i ; done
}

function show-folders-from-queue () {
  for i in `cat queue`
  do
    echo "$i `qstat -j $i | grep sge_o_workdir | awk '{print $2}'`"
  done
}

function show-failed-folders-from-queue () {
  for i in `cat error-queue`
  do
    qstat -j $i | grep sge_o_workdir | awk '{print $2}'
  done
}

function clean-error-queue () {
  for i in `cat error-queue`
  do
    qdel $i
  done
}

function resubmit-queue () {
  for i in `show-folders-from-queue`
  do
    cd $i
    echo $i
    qsub ~/bcn_scripts/submit
    cd -
  done
}

function resubmit-error-queue () {
  for i in `show-failed-folders-from-queue`
  do
    cd $i
    echo $i
    qsub ~/bcn_scripts/submit
    cd -
  done
}

function show-number-of-waiting-jobs () {
  qstat | grep ' qw' | wc | awk '{print $1}'
}

function show-number-of-running-jobs () {
  qstat | grep ' r' | wc | awk '{print $1}'
}

function show-failed-jobs () {
  qstat | grep ' Eqw'
}

function show-number-of-failed-jobs () {
  qstat | grep ' Eqw' | wc | awk '{print $1}'
}

function show-number-of-total-jobs () {
  qstat | wc | awk '{print $1}'
}

function show-number-of-jobs () {
  echo "Waiting: `show-number-of-waiting-jobs`, running: `show-number-of-running-jobs`, failed: `show-number-of-failed-jobs`, total: `show-number-of-total-jobs`"
}

alias men="$HOME/mendeleydesktop-1.15-linux-x86_64/bin/mendeleydesktop &"
alias spi="$HOME/SpiderOak/SpiderOakONE &"

#===========#
#  configs  #
#===========#
alias brc="vim ~/.bashrc"
alias crc="vim ~/.commonrc"
alias lrc="vim ~/.config/awesome/rc.lua"
alias mrc="vim ~/.muttrc"
alias src="vim ~/.ssh/config"
alias vrc="vim ~/.vimrc"
alias zrc="vim ~/.zshrc"

#====================#
#  change directory  #
#====================#
alias cd-="cd -"
alias cd..="cd .."
alias ..="cd .."
alias ..2="cd ../.."
alias ..3="cd ../../.."
alias ..4="cd ../../../.."
alias ..5="cd ../../../../.."

#=========#
#  lists  #
#=========#
alias ls='ls --color'
alias lsd='ls --color -d */'
alias ll='ls --color -lh'
alias la='ls --color -lah'
alias lad='ls --color -lah -d */'
alias lk='ls --color -lSrh'         #  Sort by size, biggest last.

#===========#
#  apt-get  #
#===========#
alias agi='sudo apt-get install'
alias agr='sudo apt-get remove'
alias agu='sudo apt-get update'
alias agg='sudo apt-get upgrade'
alias agd='sudo apt-get dist-upgrade'
alias AGU='agu; agg; agd'

#===========#
#  whizard  #
#===========#
whiz_dir1=/scratch/bcho/trunk/
whiz_dir2=$HOME/trunk/
whiz_dir3=
if [ -d $whiz_dir1 ]; then
  export whiz_soft=$whiz_dir1
elif [ -d $whiz_dir2 ]; then
  export whiz_soft=$whiz_dir2
elif [ -d $whiz_dir3 ]; then
  export whiz_soft=$whiz_dir3
fi
trnk() { cd $whiz_soft/ ; }
bui() { cd $whiz_soft/_build ; }

alias wsrc='op '$whiz_soft/_install/gfortran-dist/share/doc/whizard/whizard.pdf
alias vsrc='op '$whiz_soft/_install/gfortran-dist/share/doc/vamp/vamp.pdf
alias osrc='op '$whiz_soft/_install/gfortran-dist/share/doc/omega/omega.pdf
alias csrc='op '$whiz_soft/_install/gfortran-dist/share/doc/circe2/circe2.pdf
alias wman='op '$whiz_soft/_install/gfortran-dist/share/doc/whizard/manual.pdf
alias gman='op '$whiz_soft/_install/gfortran-dist/share/doc/whizard/gamelan_manual.pdf
function make-test () {
  make check TESTS=$1.run
}
alias mt=make-test
function get-RES () {
  grep RES $1-*/whizard.log | sed 's/^.*RES //'
}
function save-RES () {
  file=/data/bcho/whizard_ttbar_threshold_project/Data/validation/$(basename $1)$2.dat
  get-RES $1 > $file && echo "Saved to $file"
}
function update-from-Max () {
  cd ~/threshold
  svn up
  cd Data/ValidationForPaper
  cp MpoleFixed/* ~/run-scripts/threshold_validation/scan-results/
  cd ~/run-scripts/threshold_validation/scan-results/
  rm Max*.dat
  python ~/run-scripts/Mathematica-importer.py
  rm Max*.txt
  cd ~/threshold/Data/ValidationForPaper
  cp MpoleFromM1S/* ~/run-scripts/threshold_validation_mpoleUnfixed/scan-results/
  cd ~/run-scripts/threshold_validation_mpoleUnfixed/scan-results/
  rm Max*.dat
  python ~/run-scripts/Mathematica-importer.py
  rm Max*.txt
}

function gosam-helicities () {
  for i in $(eval echo "helicity{$1..$2}") ; do echo $i ; cd $i ; make ; cd .. ; done
}

#=========#
#  games  #
#=========#
alias sc='cd '$lingames'/Stronghold; wine Stronghold\ Crusader.exe'
alias ut='wine '$wingames'/UnrealTournament/System/UnrealTournament.exe'
alias wc3='wine '$wingames'/Warcraft\ III/Frozen\ Throne.exe'
alias dk2='wine '$wingames'/DungeonKeeper2/DKII.exe'

#=========#
#  other  #
#=========#
alias regain_afs='kinit && aklog'
alias le='less'
if command-exists trash-put; then
  alias rm='trash-put -v'
  alias rmm='/bin/rm'
else
  if version-bigger rm 8.4; then
    alias rm='rm -v'
  fi
fi
alias mv='mv -v'
alias md='mkdir'
alias mdc='mkdircd'
alias sd='sudo shutdown now -P'
alias rb='sudo reboot'
alias re='export DISPLAY=:0; cinnamon &'
alias du-dirs='du -sh -- * | sort -h'
alias du-subdirs='du -h | sort -h'
alias briss="java -jar $syncd/scripts/briss-0.9/briss-0.9.jar"
alias yt-mp3='youtube-dl -t --extract-audio --audio-format=mp3'
alias reset-file-perms='find . -type f -exec chmod 644 {} +'
alias reset-dir-perms='find . -type d -exec chmod 755 {} +'

function save-inodes-per-folder () {
  find . -xdev  -printf '%h\n' | sort | uniq -c | sort -k 1 -n > inodes_per_folder
}

function compute-sum-of-inodes () {
  tail inodes_per_folder -n30 | awk '{s+=$1} END {print s}'
}

#==============================================================================#
#                                SHOW-COMMANDS                                 #
#==============================================================================#
function show-wlan-channels () {
  sudo iwlist wlan0 scan | grep Frequency | sort | uniq -c | sort -n
  # doesn't work anymore?
}

alias show-distro="lsb_release -a"

alias show-kernel="uname -r"

alias show-parallel-jobs="echo $parallel_jobs"

alias show-computer-list="vim /afs/desy.de/group/theorie/theopcs/Ueberblick.txt"

function find-ref-dir () {
  pwd=`pwd`
  ref_dir=../../../../share/tests/$(basename $pwd)
  if test -f $ref_dir/ref-output/$1.ref; then
    echo "$ref_dir/ref-output"
    return
  fi
  grep --quiet 'FC_PRECISION = double' Makefile
  if test "$?" = "0" -a -f $ref_dir/ref-output-double/$1.ref; then
    echo "$ref_dir/ref-output-double"
    return
  fi
  grep --quiet 'FC_PRECISION = extended' Makefile
  if test "$?" = "0" -a -f $ref_dir/ref-output-ext/$1.ref; then
    echo "$ref_dir/ref-output-ext"
    return
  fi
  grep --quiet 'FC_PRECISION = quadruple' Makefile
  if test "$?" = "0" -a -f $ref_dir/ref-output-quad/$1.ref; then
    echo "$ref_dir/ref-output-quad"
    return
  elif test -f $ref_dir/ref-output-prec/$1.ref; then
    echo "$ref_dir/ref-output-prec"
    return
  fi
}

function show-this-diff () {
  $difftool $1.log `find-ref-dir $1`/$1.ref
}

function use-this-as-ref () {
  cp $1.log `find-ref-dir $1`/$1.ref
}

function use-all-this-as-ref () {
  for i in `grep "^FAIL: .*.run" test-suite.log | sed "s/FAIL: //" | sed "s/.run//"`; do
    use-this-as-ref $i
  done
}
function show-diff () {
  $difftool err-output/$1.out `find-ref-dir $1`/$1.ref
}

function use-as-ref () {
  cp err-output/$1.out `find-ref-dir $1`/$1.ref
}

function show-diff-processlog {
  vimdiff process_log_1_p1.log ../../../../share/tests/functional_tests/ref-output/process_log.ref
}

function use-as-ref-processlog {
  cp process_log_1_p1.log ../../../../share/tests/functional_tests/ref-output/process_log.ref
}

function update-variable-refs () {
  cd tests/unit_tests
  use-as-ref rt_data_1
  use-as-ref rt_data_2
  use-as-ref rt_data_3
  cd ../functional_tests
  use-this-as-ref show_4
  use-as-ref-processlog
  use-this-as-ref vars
  cd ../..
}

function show-failed-tests () {
  find -name 'test-suite.log' | xargs grep -v 'XFAIL' | grep -v ' 0' | grep 'FAIL'
}

function show-test-results () {
  for i in */; do
    if test -f $i/src/whizard; then
      printf "$BGreen %40s%20s:\tCHECK$NC\n" "$i" "whizard main"
    else
      printf "$BPurple %40s%20s:\tMissing$NC\n" "$i" "whizard main"
    fi
    if test -f $i/src/whizard_ut; then
      printf "$BGreen %40s%20s:\tCHECK$NC\n" "$i" "whizard_ut main"
    else
      printf "$BPurple %40s%20s:\tMissing$NC\n" "$i" "whizard_ut main"
    fi
    for j in unit functional; do
      if test -f $i/tests/${j}_tests/test-suite.log; then
        grep --quiet 'FAIL:  0' $i/tests/${j}_tests/test-suite.log
        if test "$?" = "0"; then
          printf "$BGreen %40s%20s:\tCHECK$NC\n" "$i" "$j"
        else
          printf "$BRed %40s%20s:\tFAIL$NC\n" "$i" "$j"
        fi
      else
        printf "$BBlue %40s%20s:\tMissing$NC\n" "$i" "$j"
      fi
    done
    case "$i" in
    *dist*)
      if test -f $i/whizard-`cat $i/VERSION | awk '{print $2}'`.tar.gz; then
        printf "$BGreen %40s%20s:\tCHECK$NC\n" "$i" "tarball"
      else
        printf "$BPurple %40s%20s:\tMissing$NC\n" "$i" "tarball"
      fi ;;
    esac
  done
}

function show-our-lines-of-code () {
  wc -l */*.nw | sort -n
}

function show-nr-of-own-threads () {
  ps -eLF | grep ^$USER | wc -l
}

function show-nr-of-files () {
  for i in */ ; do echo "$i : `find $i  -type f | wc -l`" ; done
}

function show-process () {
  ps -ef | grep $1
}

function show-how-often-used-here () {
  rgrep "$1" * | wc -l
}

# Get current host related info.
function show-host-information () {
  echo -e "\nYou are logged on ${BRed}$HOST"
  echo -e "\n${BRed}Additional information:$NC " ; uname -a
  echo -e "\n${BRed}Users logged on:$NC " ; w -hs |
           cut -d " " -f1 | sort | uniq
  echo -e "\n${BRed}Current date :$NC " ; date
  echo -e "\n${BRed}Machine stats :$NC " ; uptime
  echo -e "\n${BRed}Memory stats (in MB):$NC " ; free -m
  echo -e "\n${BRed}Diskspace :$NC " ; df -h / $HOME
  echo -e "\n${BRed}Local IP Address :$NC" ; my-ip
  echo
}

alias show-cpu-info='lscpu; grep -i "model name" /proc/cpuinfo | uniq'

function show-disk-speed () {
  dd if=/dev/zero of=$1/output conv=fdatasync bs=100k count=1k; rm -f $1/output
}

function count-lines-of-code () {
  for i in */; do cd $i; echo "$i `fa \.scala | grep -v html | xargs wc -l | grep total`" | grep total ; cd .. ; done
}

function mqmc-end-to-end-test () {
  docker-compose -p mqmc up -d kafka postgres && sleep 30 && \
  docker-compose -p mqmc up -d collector winners-calculation quota-calculation api fx-rates-fetcher && sleep 10 && \
  docker-compose -p mqmc up -d draw-metadata-generator && \
  docker-compose -p mqmc up -d pool-order-generator && \
  docker-compose -p mqmc up -d draw-result-generator && \
  docker-compose -p mqmc up -d primary-quotas-generator && \
  docker-compose -p mqmc up -d trigger-secondary-winner-calculation-generator && sleep 5 &&
  docker-compose -p mqmc up -d trigger-secondary-quota-calculation-generator && sleep 5 &&
  docker-compose -p mqmc up -d publish-secondary-quotas-generator
}

function show-big-files () {
  find . -type f -size +20000k -exec ls -lh {} \; | awk '{ print $9 ": " $5 }'
}

function show-pylint-scores () {
  for i in ./*.py; do
  score=`pylint $i | grep "rated at" | awk '{print $7}'`
  echo "$i : $score"
done
}

function create-svn-commit-msg () {
  git log --pretty=format:'%s,%b' origin/master..HEAD > ~/trunk/svn_commit
}

function change-email-password () {
  cd /tmp
  rm key
  echo "$1" > key
  gpg2 --encrypt key
  mv key.gpg ~/cloud/keys/offlineimappass-desy.gpg
}

function st () {
  sensible-browser &> /dev/null &
  spotify --force-device-scale-factor=1.5 &> /dev/null &
  tmux
}

#==============================================================================#
#                                     GIT                                      #
#==============================================================================#
# Ignore changes to local file in status,
# useful for machine-specifc configs (followed by file)
alias gituiu='git update-index --assume-unchanged'

# Remove the above flag again to be able to commit changes of that file
alias gituinu='git update-index --no-assume-unchanged'

function gitignore () {
  echo "$1" >> .gitignore
}

function git-changelog () {
  git log $(git tag --sort version:refname | tail -2 | sed ':a;N;$!ba;s/\n/../g') --pretty=oneline --abbrev-commit
}

#==================#
#  initialization  #
#==================#
# Adding everything. Useful for initialisation and svn updates
function gitA () {
  git status
  echo "Are you really sure you want to commit EVERYTHING?? Have u pulled before?"
  echo "Does it fit the commit message '$1'?"
  select yn in "Yes" "No"; do
    case $yn in
      Yes ) git add -A; git commit -m "$1"; break;;
      No ) break;;
    esac
  done
}

# Create bare repo on the server (followed by reponame.git)
alias gitin='git init --bare'

# Push your complete local repo to the server
# (followed by ssh://user@yourserver/~/reponame.git)
alias gitpm='git push --mirror'

alias git-accept-deleted='git ls-files --deleted -z | xargs -0 git rm '

#==========#
#  basics  #
#==========#
# Add a single file or directory
alias gita='git add'

# Move a file with meta information
alias gitmv='git mv'

# Move a file with meta information
alias gitrm='git rm'

# Commit the staged changes to the HEAD
alias gitc='git commit -m'

# Clean the current directory of all build products and other non-tracked files
alias gitcl='git clean -x -i'

# Interactively add chunks and see what u have done (CUSTOM ALIAS)
alias giti='git interactive'

# See the current status
alias gits='git status'

# See status faster but does not track new files
alias gitS='git status -uno .'

# Pull from the remote
alias gitl='git pull --rebase'

# Pull from the remote and overwrite all local changes (CUSTOM ALIAS)
alias gitlh='git pullhard'

# Push to the remote
alias gitp='git push'

# Push all tags and branches to the remote
alias gitpa='git push --all origin'

# See the latest commits? (CUSTOM ALIAS)
alias gitn='git new'

#===============#
#  differences  #
#===============#
# Show the diff between unstaged changes (working dir) against the index
# If followed by master..branch it shows complete diff between branches
alias gitd='git diff'

# Show the diff between staged changes (index) against the current HEAD
alias gitdc='git diff --cached'

# Show all the changes since the last commit, staged or not
alias gitdh='git diff HEAD'

# Show which files have changed between branches (followed by: master..branch)
alias gitdb='git diff --stat --color'

#============#
#  branches  #
#============#
# Checkout another branch or file from it 'gite BRANCH -- FILE'
alias gite='git checkout'

# Cherry pick a commit from another branch
alias gitcp='git cherry-pick'

# Create a new branch (followed by branchname)
alias gitb='git branch'

# Rename your current branch (followed by newbranchname)
alias gitbm='git branch -m'

# Switch to svn and get updates from svn
alias gsu='gite svn ; svnu ; gits'

#=================#
#  VISUALIZATION  #
#=================#
# Creates a dot file. TODO: Add the pipe through dot and show the pdf
alias gitm='git makedot'
alias gitml='git mylog'
alias gitml2='git morelog'
alias gitml3='git shortlog'

function show-path () {
  tr ':' '\n' <<< "$PATH"
}

function show-python-path () {
  tr ':' '\n' <<< "$PYTHONPATH"
}

function show-lib-path () {
  tr ':' '\n' <<< "$LD_LIBRARY_PATH"
}

#==========#
#  github  #
#==========#
function github {
  git clone git@github.com:$1/$2.git
}

function bitbucket {
  git clone ssh://git@bitbucket.org/$1/$2.git
}

function bitbucket-hg {
  hg clone ssh://hg@bitbucket.org/$1/$2
}

#==============================================================================#
#                                     SVN                                      #
#==============================================================================#
if command-exists svn-color.py && command-exists svn; then
  alias svn=svn-color.py
fi
alias svna='svn add'
alias svnu='svn update'
alias svns='svn status'
alias svnc='svn commit'

# Show the changes that will be commited
alias svnd='svn diff'

# Edit which files are ignored in the current directory
alias svnp='svn propedit svn:ignore .'

# Revert all changes made recursively
alias svnR='svn revert -R .'

function get-link-svn {
  svn info $1 | sed -ne 's/^URL: //p' | sed 's/\/desy/\/public/'
}

alias svn-show='svn diff -c'

#==============================================================================#
#                                     TCON                                     #
#==============================================================================#
alias tcstart='tcon start ~/theoc.yaml --session-name=theoc'
function tcsend {
  tcon send theoc "$1"
}
alias tcdel='tcon delete --all'

echo "loaded commonrc"
export LOADED=true


function start-presentation-servers () {
  cd 01-intro
  grunt serve --port=8001 &
  cd ..
  cd 02-more-commands
  grunt serve --port=8002 &
  cd ..
  cd 03-bash-scripting
  grunt serve --port=8003 &
  cd ..
  cd 04-regex
  grunt serve --port=8004 &
  cd ..
  cd 05-makefiles
  grunt serve --port=8005 &
  cd ..
  cd 06-git
  grunt serve --port=8006 &
  cd ..
}

################################################################################
#                                     SBT                                      #
################################################################################
alias sbt='sbt -mem 8192'
alias sbt-plugin-updates='sbt ";dependencyUpdates; reload plugins; dependencyUpdates"'

################################################################################
#                                    DOCKER                                    #
################################################################################
alias docker-stop-all="docker stop $(docker ps -a -q)"
alias docker-rm-all="docker rm $(docker ps -a -q)"

################################################################################
#                                     HPO                                      #
################################################################################
export HAM="seals.ham.sg-cloud.co.uk"
export QA="$HAM"
export ZOE_QA="app-qa-01.$QA"
export MQMC_QA="mqmc-qa-01.$QA"
export HEDGING_QA="hedging-qa-01.$QA"
export LIS_QA="external-services.$QA"
export EXTERNAL_QA="external-services.$QA"
export KAFKA_QA="kafka-qa-01.$QA"
export POSTGRES_QA="pgsql-qa-01.$QA"
export CASSANDRA_QA="cas-db-qa-01.$QA"

export STAGEC="m24.stagec.sg-cloud.co.uk"
export PREPROD="$STAGEC"
export ZOE_PREPROD="app-01.$STAGEC"
export MQMC_PREPROD="mqmc-01.$STAGEC"
export HEDGING_PREPROD="hedging-01.$STAGEC"
export LIS_PREPROD="external-services.$STAGEC"
export EXTERNAL_PREPROD="external-services.$STAGEC"
export KAFKA_PREPROD="kafka-01.$STAGEC"
export POSTGRES_PREPROD="pgsql-01.$STAGEC"
export CASSANDRA_PREPROD="cassandra-01.$STAGEC"


export LIVEC="m24.livec.sg-cloud.co.uk"
export MQMC_PROD="mqmc-01.$LIVEC"
export POSTGRES_PROD="pgsql-01.$LIVEC"

export ZOE_PREPROD_HAM=app-pre-prod-02.seals.ham.sg-cloud.co.uk

function connectZoeUiToQA () {
  export MQMC_HOSTNAME=$MQMC_QA
  export ZOE_HOST=$ZOE_QA:8080
  export LIS_HOST=$LIS_QA
}
function connectZoeUiToPreProd () {
  export MQMC_HOSTNAME=$MQMC_PREPROD
  export ZOE_HOST=$ZOE_PREPROD_HAM:8080
}
export ZOE_UI_TABLE_RELOAD=false
export GITHUB_API="https://srv-git-01-hh1.alinghi.tipp24.net/api/v3"
function show-open-prs () {
  curl -s -X GET "$GITHUB_API/search/issues?q=state:open+org:hpo+no:label+is:pr" \
  | jq ".items | map(\"\(.title) by \(.user.login)\",.html_url)[]" | awk 'NR%2{printf "`%-90s `",$0;next;}1'
}

function show-open-prs-that-need-review () {
  curl -s -X GET "$GITHUB_API/search/issues?q=state:open+org:hpo+no:label+is:pr+review:required" \
  | jq ".items | map(\"\(.title) by \(.user.login)\",.html_url)[]" | awk 'NR%2{printf "`%-90s `",$0;next;}1'
}

function show-open-prs-that-are-approved () {
  curl -s -X GET "$GITHUB_API/search/issues?q=state:open+org:hpo+no:label+is:pr+review:approved" \
  | jq ".items | map(\"\(.title) by \(.user.login)\",.html_url)[]" | awk 'NR%2{printf "`%-90s `",$0;next;}1'
}

function show-open-prs-that-requested-changes () {
  curl -s -X GET "$GITHUB_API/search/issues?q=state:open+org:hpo+no:label+is:pr+review:changes_requested" \
  | jq ".items | map(\"\(.title) by \(.user.login)\",.html_url)[]" | awk 'NR%2{printf "`%-90s `",$0;next;}1'
}

function show-repos () {
  curl -s -X GET "$GITHUB_API/orgs/hpo/repos?type=sources&per_page=100" | jq "map(.git_url) | .[]" -M -r
}

function pushToLive () {
echo foo
  for i in `echo "collector fx-rates-fetcher winners-calculator quota-calculator api"`; do \
    docker pull "devservices01.office.tipp24.de:5000/mqmc/$i:0.4.7" && \
    docker tag "devservices01.office.tipp24.de:5000/mqmc/$i:0.4.7" \
      "docker-registry.games.live.tipp24.net:5000/mqmc/$i:0.4.7" && \
    docker push "docker-registry.games.live.tipp24.net:5000/mqmc/$i:0.4.7" ; \
  done
}

function show-open-prs-ordered () {
  echo "PRs that need review: :eyes:"
  show-open-prs-that-need-review
  echo
  echo "PRs that are approved: :white_check_mark:"
  show-open-prs-that-are-approved
  echo
  echo "PRs for which changes have been requested: :construction:"
  show-open-prs-that-requested-changes
}

function show-contributions-of-hpo () {
  ~/bcn_scripts/bin/show-contributions-of-repo.sh mqmc
  ~/bcn_scripts/bin/show-contributions-of-repo.sh hedging-services
  ~/bcn_scripts/bin/show-contributions-of-repo.sh zoe
}

function show-my-PRs-of-this-month () {
  curl -s -X GET "$GITHUB_API/search/issues?q=author:bijan-chokoufe+org:hpo+is:pr+created:>=2017-12-01" | jq ".items[] | .title"
}

alias a='./ansiblew -u bijan.chokoufe --vault-password-file ~/.ansible/vault.key'


export PATH="/home/bijancn/miniconda2/bin:$PATH"
# fix for that shit broken conda
export MKL_THREADING_LAYER=GNU

# vim: set filetype=sh
